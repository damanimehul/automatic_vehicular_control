diff --git a/automatic_vehicular_control/figure_eight.py b/automatic_vehicular_control/figure_eight.py
index d236275..502b3e4 100644
--- a/automatic_vehicular_control/figure_eight.py
+++ b/automatic_vehicular_control/figure_eight.py
@@ -2,6 +2,105 @@ from automatic_vehicular_control.exp import *
 from automatic_vehicular_control.env import *
 from automatic_vehicular_control.u import *
 
+class new_buffer() : 
+
+    def __init__(self,obs_size=4,batch_size=32,replay_size=2000000,prediction_horizon=10,action_dim=1) : 
+        self.obs_dim = obs_size 
+        self.batch_size = batch_size 
+        self.replay_size = replay_size 
+        self.horizon = prediction_horizon 
+        self.action_dim = action_dim 
+        self.trajectory, self.multi_step_struct= [], [] 
+        self.ptr, self.size, self.max_size = 0, 0,replay_size
+        self.max_struct_size, self.struct_ptr, self.reached_max = 30000, 0 , 0 
+        self.ep_len = 0 
+        self.fo_in = np.zeros((replay_size,obs_size+action_dim)) 
+        self.fo_r = [None for _ in range(self.replay_size)]
+        self.y     = np.zeros((replay_size,obs_size)) 
+
+    def step_update(self,o,r,a) : 
+        keys = sorted(o.keys()) 
+        num_objects = len(keys) 
+        obs = np.zeros((num_objects,self.obs_dim))  
+        act = np.zeros((num_objects,self.action_dim)) 
+        rel = [ None for _ in range(num_objects)] 
+        for i,elem in enumerate(keys) : 
+            obs[i] = o[elem]
+            act[i] = a[elem]
+            rel[i] = r[elem] 
+        #rel = (np.rint(rel)).astype(int)
+        self.trajectory.append([obs,act,rel]) 
+        self.ep_len +=1 
+
+    def get_obs(self,o,r,a) : 
+        keys = sorted(o.keys()) 
+        num_objects = len(keys) 
+        obs = np.zeros((num_objects,self.obs_dim))  
+        for i,elem in enumerate(keys) : 
+            obs[i] = o[elem]
+        return obs 
+
+    def push_to_buffer(self) : 
+        for t in range(len(self.trajectory)-1) : 
+            o,a,r,y = self.trajectory[t][0],self.trajectory[t][1],self.trajectory[t][2],self.trajectory[t+1][0] 
+            num_objects = o.shape[0] 
+            o_comb = np.concatenate((o,a),axis=1)  
+            v = o_comb[r] 
+            for i in range(num_objects) : 
+                self.fo_in[self.ptr] = o_comb[i] 
+                self.fo_r[self.ptr] = v[i] 
+                self.y[self.ptr] = y[i] 
+                self.ptr = (self.ptr+1)% self.max_size
+                self.size = min(self.size+1,self.max_size)
+
+    def sample_batch(self) :
+        # Sample random idxs from buffer 
+        # fr_u,fr_v are input to the relation model, effects (obtained using relation model) and fo_u are input to the object model, y is the ground truth
+        idxs = np.random.randint(0, self.size, size=self.batch_size)
+        return dict(fo_in=self.fo_in[idxs],
+                    fo_r=self.fo_r[idxs],
+                    y=self.y[idxs])
+                
+    def multi_step_push(self,t) : 
+        state = {} 
+        o,r = self.trajectory[t][0],self.trajectory[t][2]
+        v = o[r] 
+        state['fo_in'] = o 
+        state['fo_r'] = v
+        for i in range(self.horizon) :  
+            state['y_{}'.format(i+1)] = self.trajectory[t+i+1][0]
+            state['a_{}'.format(i)] = self.trajectory[t+i][1]
+
+        if self.reached_max :
+                self.multi_step_struct[self.struct_ptr] = state  
+                self.struct_ptr = (self.struct_ptr+1) % self.max_struct_size 
+        else :
+                self.multi_step_struct.append(state)
+                self.reached_max = len(self.multi_step_struct) == self.max_struct_size
+                if self.reached_max : 
+                    print('Reached Maximum for Struct, now samples will be removed from it') 
+        
+    def sample_multi_step(self) : 
+        # To test multi-step prediction for all vehicles at a given timestep, a single element from the multi_step_struct is sampled (This is not used for training
+        # but is used for evaluating the performance of the model on long horizon predictions)
+        ind = np.random.randint(0,len(self.multi_step_struct)) 
+        return self.multi_step_struct[ind] 
+    
+    def end_episode(self): 
+        # Pushing to buffer just builds up the training buffer 
+        self.push_to_buffer()
+        for _ in range(500) :
+            t= np.random.randint(0,self.ep_len-self.horizon-1)
+            #for t in range(self.ep_len - self.horizon) :
+            try :
+                self.multi_step_push(t)
+            except :
+                print('Error building up multi-step struct, breaking')
+                break  
+        # Reset quantities which just need to be stored for the duration of a trajectory  
+        self.ep_len = 0 
+        self.trajectory = [] 
+
 class FigureEightEnv(Env):
     def def_sumo(self):
         c = self.c